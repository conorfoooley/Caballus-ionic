import { UserSimple } from '@clicked/api-common';
import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from '@nestjs/common';
import { PaginatedList } from '@rfx/common';
import { FileService } from '@rfx/nst-file';
import { from, Observable } from 'rxjs';
import { switchMap } from 'rxjs/operators';

@Injectable()
export class UserSimpleProfilePictureInterceptor implements NestInterceptor {
    constructor(private readonly _fileService: FileService) {}

    private async _mapUserSimpleProfilePicture(user: UserSimple): Promise<UserSimple> {
        if (user.profilePicture && user.profilePicture.path) {
            const url = await this._fileService.getUrl(user.profilePicture.path);
            return new UserSimple({
                ...user,
                profilePicture: {
                    ...user.profilePicture,
                    url
                },
                pictures: await Promise.all(
                    user.pictures.map(async p => ({
                        ...p,
                        latest: {
                            ...p.latest,
                            url: await this._fileService.getUrl(p.latest.path)
                        }
                    }))
                )
            });
        }
        return user;
    }

    public intercept(
        context: ExecutionContext,
        next: CallHandler
    ): Observable<UserSimple | UserSimple[] | PaginatedList<UserSimple>> {
        return next.handle().pipe(
            switchMap((params: UserSimple | UserSimple[] | PaginatedList<UserSimple>) => {
                if (params instanceof PaginatedList) {
                    return from(
                        (async () =>
                            new PaginatedList<UserSimple>({
                                ...params,
                                docs: await Promise.all(
                                    params.docs.map(u => this._mapUserSimpleProfilePicture(u))
                                )
                            }))()
                    );
                } else if (Array.isArray(params)) {
                    return from(Promise.all(params.map(u => this._mapUserSimpleProfilePicture(u))));
                }
                return from(this._mapUserSimpleProfilePicture(params));
            })
        );
    }
}
